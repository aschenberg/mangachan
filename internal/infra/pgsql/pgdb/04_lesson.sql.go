// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 04_lesson.sql

package pgdb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const findLessonByID = `-- name: FindLessonByID :one
SELECT lesson_id, title, video_url, number, is_free, is_deleted, created_at, updated_at FROM lesson
WHERE lesson_id = $1 LIMIT 1
`

func (q *Queries) FindLessonByID(ctx context.Context, lessonID int32) (Lesson, error) {
	row := q.db.QueryRow(ctx, findLessonByID, lessonID)
	var i Lesson
	err := row.Scan(
		&i.LessonID,
		&i.Title,
		&i.VideoUrl,
		&i.Number,
		&i.IsFree,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertLesson = `-- name: InsertLesson :one
INSERT INTO lesson (
	title,
	video_url,
	number,
  	is_free,
	is_deleted,
	created_at,
	updated_at
) VALUES (
  $1,$2,$3,$4,$5, $6,$7
)
RETURNING lesson_id,title
`

type InsertLessonParams struct {
	Title     string
	VideoUrl  pgtype.Text
	Number    int32
	IsFree    bool
	IsDeleted bool
	CreatedAt int64
	UpdatedAt int64
}

type InsertLessonRow struct {
	LessonID int32
	Title    string
}

func (q *Queries) InsertLesson(ctx context.Context, arg InsertLessonParams) (InsertLessonRow, error) {
	row := q.db.QueryRow(ctx, insertLesson,
		arg.Title,
		arg.VideoUrl,
		arg.Number,
		arg.IsFree,
		arg.IsDeleted,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i InsertLessonRow
	err := row.Scan(&i.LessonID, &i.Title)
	return i, err
}

const removeLesson = `-- name: RemoveLesson :exec
DELETE FROM lesson
WHERE lesson_id = $1
`

func (q *Queries) RemoveLesson(ctx context.Context, lessonID int32) error {
	_, err := q.db.Exec(ctx, removeLesson, lessonID)
	return err
}
