// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 06_page_char.sql

package pgdb

import (
	"context"
)

const findPageCharByID = `-- name: FindPageCharByID :one
SELECT page_char_id, page_id, char_id, created_at, updated_at FROM page_char
WHERE page_char_id = $1 LIMIT 1
`

func (q *Queries) FindPageCharByID(ctx context.Context, pageCharID int32) (PageChar, error) {
	row := q.db.QueryRow(ctx, findPageCharByID, pageCharID)
	var i PageChar
	err := row.Scan(
		&i.PageCharID,
		&i.PageID,
		&i.CharID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertPageChar = `-- name: InsertPageChar :one
INSERT INTO page_char (
	page_id,
	char_id,
	created_at,
	updated_at
) VALUES (
  $1,$2,$3,$4
)
RETURNING page_char_id,char_id
`

type InsertPageCharParams struct {
	PageID    int32
	CharID    int32
	CreatedAt int64
	UpdatedAt int64
}

type InsertPageCharRow struct {
	PageCharID int32
	CharID     int32
}

func (q *Queries) InsertPageChar(ctx context.Context, arg InsertPageCharParams) (InsertPageCharRow, error) {
	row := q.db.QueryRow(ctx, insertPageChar,
		arg.PageID,
		arg.CharID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i InsertPageCharRow
	err := row.Scan(&i.PageCharID, &i.CharID)
	return i, err
}

const removePageChar = `-- name: RemovePageChar :exec
DELETE FROM page_char
WHERE page_char_id = $1
`

func (q *Queries) RemovePageChar(ctx context.Context, pageCharID int32) error {
	_, err := q.db.Exec(ctx, removePageChar, pageCharID)
	return err
}
