// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 03_manga.sql

package pgdb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createManga = `-- name: CreateManga :one
INSERT INTO manga (
  	manga_id,
	title,
	title_en,
  	synonyms,
	cover_id,
	type,
	country,
	status,
	updated_at,
	created_at
) VALUES (
  $1,$2,$3,$4,$5,$6,$7,$8,$9,$10
) ON CONFLICT (title) DO NOTHING 
RETURNING manga_id,title
`

type CreateMangaParams struct {
	MangaID   int64
	Title     string
	TitleEn   pgtype.Text
	Synonyms  []string
	CoverID   int64
	Type      string
	Country   string
	Status    pgtype.Text
	UpdatedAt int64
	CreatedAt int64
}

type CreateMangaRow struct {
	MangaID int64
	Title   string
}

func (q *Queries) CreateManga(ctx context.Context, arg CreateMangaParams) (CreateMangaRow, error) {
	row := q.db.QueryRow(ctx, createManga,
		arg.MangaID,
		arg.Title,
		arg.TitleEn,
		arg.Synonyms,
		arg.CoverID,
		arg.Type,
		arg.Country,
		arg.Status,
		arg.UpdatedAt,
		arg.CreatedAt,
	)
	var i CreateMangaRow
	err := row.Scan(&i.MangaID, &i.Title)
	return i, err
}

const findMangaByID = `-- name: FindMangaByID :one
SELECT manga_id, title, title_en, synonyms, cover_id, type, country, status, created_at, updated_at FROM manga
WHERE manga_id = $1 LIMIT 1
`

func (q *Queries) FindMangaByID(ctx context.Context, mangaID int64) (Manga, error) {
	row := q.db.QueryRow(ctx, findMangaByID, mangaID)
	var i Manga
	err := row.Scan(
		&i.MangaID,
		&i.Title,
		&i.TitleEn,
		&i.Synonyms,
		&i.CoverID,
		&i.Type,
		&i.Country,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
