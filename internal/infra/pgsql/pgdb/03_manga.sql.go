// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 03_manga.sql

package pgdb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createManga = `-- name: CreateManga :one
INSERT INTO manga (
  	manga_id,
	title,
	titles,
  	synonyms,
	cover_id,
	type,
	country,
	status,
	updated_at,
	created_at
) VALUES (
  $1,$2,$3,$4,$5,$6,$7,$8,$9,$10
) ON CONFLICT (title) DO NOTHING 
RETURNING manga_id,title
`

type CreateMangaParams struct {
	MangaID   int64
	Title     string
	Titles    []string
	Synonyms  []string
	CoverID   int64
	Type      string
	Country   string
	Status    pgtype.Text
	UpdatedAt int64
	CreatedAt int64
}

type CreateMangaRow struct {
	MangaID int64
	Title   string
}

func (q *Queries) CreateManga(ctx context.Context, arg CreateMangaParams) (CreateMangaRow, error) {
	row := q.db.QueryRow(ctx, createManga,
		arg.MangaID,
		arg.Title,
		arg.Titles,
		arg.Synonyms,
		arg.CoverID,
		arg.Type,
		arg.Country,
		arg.Status,
		arg.UpdatedAt,
		arg.CreatedAt,
	)
	var i CreateMangaRow
	err := row.Scan(&i.MangaID, &i.Title)
	return i, err
}

const findMangaByID = `-- name: FindMangaByID :one
SELECT manga_id, title, titles, synonyms, a.cover_id, type, country, status, a.created_at, a.updated_at, detail_id, published, authors, artist, source, summary, b.updated_at, b.created_at, score_id, score, c.created_at, c.updated_at, d.cover_id, cover_detail, thumbnail, extra, d.created_at, d.updated_at FROM manga AS a 
LEFT JOIN manga_detail AS b ON a.manga_id = b.detail_id 
LEFT JOIN manga_score AS c ON a.manga_id = c.score_id
LEFT JOIN manga_cover AS d ON a.manga_id = d.cover_id
WHERE a.manga_id = $1 LIMIT 1
`

type FindMangaByIDRow struct {
	MangaID     int64
	Title       string
	Titles      []string
	Synonyms    []string
	CoverID     int64
	Type        string
	Country     string
	Status      pgtype.Text
	CreatedAt   int64
	UpdatedAt   int64
	DetailID    pgtype.Int8
	Published   pgtype.Text
	Authors     []string
	Artist      []string
	Source      pgtype.Text
	Summary     pgtype.Text
	UpdatedAt_2 pgtype.Int8
	CreatedAt_2 pgtype.Int8
	ScoreID     pgtype.Int8
	Score       pgtype.Numeric
	CreatedAt_3 pgtype.Int8
	UpdatedAt_3 pgtype.Int8
	CoverID_2   pgtype.Int8
	CoverDetail pgtype.Text
	Thumbnail   pgtype.Text
	Extra       []string
	CreatedAt_4 pgtype.Int8
	UpdatedAt_4 pgtype.Int8
}

func (q *Queries) FindMangaByID(ctx context.Context, mangaID int64) (FindMangaByIDRow, error) {
	row := q.db.QueryRow(ctx, findMangaByID, mangaID)
	var i FindMangaByIDRow
	err := row.Scan(
		&i.MangaID,
		&i.Title,
		&i.Titles,
		&i.Synonyms,
		&i.CoverID,
		&i.Type,
		&i.Country,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DetailID,
		&i.Published,
		&i.Authors,
		&i.Artist,
		&i.Source,
		&i.Summary,
		&i.UpdatedAt_2,
		&i.CreatedAt_2,
		&i.ScoreID,
		&i.Score,
		&i.CreatedAt_3,
		&i.UpdatedAt_3,
		&i.CoverID_2,
		&i.CoverDetail,
		&i.Thumbnail,
		&i.Extra,
		&i.CreatedAt_4,
		&i.UpdatedAt_4,
	)
	return i, err
}
