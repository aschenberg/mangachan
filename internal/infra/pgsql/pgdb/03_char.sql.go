// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 03_char.sql

package pgdb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const findCharByID = `-- name: FindCharByID :one
SELECT char_id, step, image, voice, en, id, is_deleted, created_at, updated_at FROM char
WHERE char_id = $1 LIMIT 1
`

func (q *Queries) FindCharByID(ctx context.Context, charID int32) (Char, error) {
	row := q.db.QueryRow(ctx, findCharByID, charID)
	var i Char
	err := row.Scan(
		&i.CharID,
		&i.Step,
		&i.Image,
		&i.Voice,
		&i.En,
		&i.ID,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertChar = `-- name: InsertChar :one
INSERT INTO char (
	step,
	image,
	voice,
  	en,
	id,
	is_deleted,
	created_at,
	updated_at
) VALUES (
  $1,$2,$3,$4,$5, $6,$7,$8
)
RETURNING char_id,image
`

type InsertCharParams struct {
	Step      int32
	Image     pgtype.Text
	Voice     pgtype.Text
	En        pgtype.Text
	ID        pgtype.Text
	IsDeleted bool
	CreatedAt int64
	UpdatedAt int64
}

type InsertCharRow struct {
	CharID int32
	Image  pgtype.Text
}

func (q *Queries) InsertChar(ctx context.Context, arg InsertCharParams) (InsertCharRow, error) {
	row := q.db.QueryRow(ctx, insertChar,
		arg.Step,
		arg.Image,
		arg.Voice,
		arg.En,
		arg.ID,
		arg.IsDeleted,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i InsertCharRow
	err := row.Scan(&i.CharID, &i.Image)
	return i, err
}

const removeChar = `-- name: RemoveChar :exec
DELETE FROM char
WHERE char_id = $1
`

func (q *Queries) RemoveChar(ctx context.Context, charID int32) error {
	_, err := q.db.Exec(ctx, removeChar, charID)
	return err
}
