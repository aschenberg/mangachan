// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 05_page.sql

package pgdb

import (
	"context"
)

const findPageByID = `-- name: FindPageByID :one
SELECT page_id, lesson_id, page_number, created_at, updated_at FROM page
WHERE page_id = $1 LIMIT 1
`

func (q *Queries) FindPageByID(ctx context.Context, pageID int32) (Page, error) {
	row := q.db.QueryRow(ctx, findPageByID, pageID)
	var i Page
	err := row.Scan(
		&i.PageID,
		&i.LessonID,
		&i.PageNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertPage = `-- name: InsertPage :one
INSERT INTO page (
	lesson_id,
	page_number,
	created_at,
	updated_at
) VALUES (
  $1,$2,$3,$4
)
RETURNING page_id,lesson_id,page_number
`

type InsertPageParams struct {
	LessonID   int32
	PageNumber int32
	CreatedAt  int64
	UpdatedAt  int64
}

type InsertPageRow struct {
	PageID     int32
	LessonID   int32
	PageNumber int32
}

func (q *Queries) InsertPage(ctx context.Context, arg InsertPageParams) (InsertPageRow, error) {
	row := q.db.QueryRow(ctx, insertPage,
		arg.LessonID,
		arg.PageNumber,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i InsertPageRow
	err := row.Scan(&i.PageID, &i.LessonID, &i.PageNumber)
	return i, err
}

const removePage = `-- name: RemovePage :exec
DELETE FROM page
WHERE page_id = $1
`

func (q *Queries) RemovePage(ctx context.Context, pageID int32) error {
	_, err := q.db.Exec(ctx, removePage, pageID)
	return err
}
